Start with enabling thumb 32 mode since Cortex-M3 do not work with arm mode
@ Unified syntax is used to enable good of the both words...
@ Make sure to run arm-none-eabi-objdump.exe -d prj1.elf to check if
@ the assembler used proper insturctions. (Like ADDS)

 .thumb
 .syntax unified

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Definitions
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Definitions section. Define all the registers and
@ constants here for code readability.
@ Constants
@ Keep the STACKINIT variable.
 .equ     STACKINIT,   0x20008000
 .equ     DELAY,       200000

@ Register Addresses
@ You can find the base addresses for all the peripherals from Memory Map section
@ RM0008 on page 49. Then the offsets can be found on their relevant sections.
@ As shown in GPIOD_ODR register
 .equ     RCC_APB2ENR,   0x40021018      @ enable clock
 .equ     GPIOD_CRL,     0x40011400      @ PORTD control register low
 .equ     GPIOD_ODR,     0x4001140C      @ PORTD output data (Page 172 from RM0008)

.section .text
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Vectors
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Vector table start
 .word    STACKINIT
 .word    _start + 1

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Main code starts from here
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

_start:
@ Enable GPIOD Peripheral Clock
LDR R6, =RCC_APB2ENR    @ Load peripheral clock enable register
LDR R5, [R6]            @ Read the content
ORR R5, 0x00000020      @ Set pin5 to enable GPIOD clock
STR R5, [R6]            @ Store back the result in peripheral clock enable register

@ Make GPIOD Pin0 as output pin
LDR R6, = GPIOD_CRL    @ Load GPIOD control register low
LDR R5, = 0x00000002   @ Set MODE bits to 10 and CNF bits to 00
STR R5, [R6]           @ Store back the result in GPIOD control register low

DOT:                   @ Define a function for dot
@ Set GPIOD Pin0 to 1
LDR R6, = GPIOD_ODR    @ Load GPIOD output data register
LDR R5, = 0x00000001   @ Set Pin 0 to 1
STR R5, [R6]           @ Store back the result in GPIOD control register low

LDR R1 = DELAY
BL delayme

@ Set GPIOD Pin0 to 0
LDR R6, = GPIOD_ODR    @ Load GPIOD output data register
LDR R5, = 0x00000000   @ Set Pin 0 to 0
STR R5, [R6]           @ Store back the result in GPIOD control register low
BX LR
B DOT

DASH:                  @ Define a function for dash
@ Set GPIOD Pin0 to 1
LDR R6, = GPIOD_ODR    @ Load GPIOD output data register
LDR R5, = 0x00000001   @ Set Pin 0 to 1
STR R5, [R6]           @ Store back the result in GPIOD control register low

LDR R2, =#3
MUL.W R1, R2, DELAY
BL delayme

@ Set GPIOD Pin0 to 0
LDR R6, = GPIOD_ODR    @ Load GPIOD output data register
LDR R5, = 0x00000000   @ Set Pin 0 to 0
STR R5, [R6]           @ Store back the result in GPIOD control register low
BX LR

B DASH

delayme:
SUBS R1, #1
BNE delayme
BX LR

main:

ZERO:
LDR R3, =#5
loop0
BL DASH
LDR R1, = DELAY
BL delayme
SUBS R3, #1
BNE loop0 
